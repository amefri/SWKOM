/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.fhtw.swkom.paperless.controller;

import at.fhtw.swkom.paperless.services.dto.DocumentDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;

import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-18T20:56:04.502791654Z[Etc/UTC]", comments = "Generator version: 7.10.0-SNAPSHOT")
@Validated
@Controller
@Tag(name = "paperless", description = "Paperless REST-Api")
public interface PaperlessApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/documents/{id} : Delete a document by id
     *
     * @param id The id of the document (required)
     * @return Document deleted successfully (status code 204)
     *         or Document does not exist with this id! (status code 404)
     */
    @Operation(
        operationId = "deleteDocument",
        summary = "Delete a document by id",
        tags = { "paperless" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Document deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Document does not exist with this id!")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/documents/{id}"
    )
    
    default ResponseEntity<Void> deleteDocument(
        @Parameter(name = "id", description = "The id of the document", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/documents/{id} : Retrieve a document by id
     *
     * @param id The id of the document (required)
     * @return Success (status code 200)
     *         or Document does not exist with this id! (status code 404)
     */
    @Operation(
        operationId = "getDocument",
        summary = "Retrieve a document by id",
        tags = { "paperless" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Document does not exist with this id!")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DocumentDTO> getDocument(
        @Parameter(name = "id", description = "The id of the document", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"author\", \"created\" : \"created\", \"id\" : 0, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/documents : Return a list of documents
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocuments",
        summary = "Return a list of documents",
        tags = { "paperless" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DocumentDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DocumentDTO> getDocuments(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"author\" : \"author\", \"created\" : \"created\", \"id\" : 0, \"title\" : \"title\" }, { \"author\" : \"author\", \"created\" : \"created\", \"id\" : 0, \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/documents/post_document : Upload a document
     *
     * @param document  (optional)
     * @param file  (optional)
     * @return Document successfully uploaded. (status code 200)
     *         or Document upload failed due to bad request! (status code 400)
     */
    @Operation(
        operationId = "postDocument",
        summary = "Upload a document",
        tags = { "paperless" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Document successfully uploaded."),
            @ApiResponse(responseCode = "400", description = "Document upload failed due to bad request!")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/documents/post_document",
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Void> postDocument(
        @Parameter(name = "document", description = "") @Valid @RequestParam(value = "document", required = false) String document,
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/documents/{id} : Update a document by id
     *
     * @param id The id of document (required)
     * @return Document updated successfully (status code 204)
     *         or Document does not exist with this id (status code 404)
     */
    @Operation(
        operationId = "updateDocument",
        summary = "Update a document by id",
        tags = { "paperless" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Document updated successfully"),
            @ApiResponse(responseCode = "404", description = "Document does not exist with this id")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/documents/{id}"
    )
    
    default ResponseEntity<Void> updateDocument(
        @Parameter(name = "id", description = "The id of document", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
